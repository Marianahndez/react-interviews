[{"C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\index.js":"1","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\reportWebVitals.js":"2","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\components\\HomePage\\index.js":"3","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\components\\InterviewersDashboard\\index.js":"4","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\components\\CandidatesDashboard\\index.js":"5","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\components\\ModalPersonAdd\\index.js":"6","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\components\\QuestionsPage\\index.js":"7","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\components\\SummaryPage\\index.js":"8","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\Redux\\store.js":"9","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\Redux\\rootReducer.js":"10","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\Redux\\context.js":"11","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\Redux\\Interview\\interviewActions.js":"12","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\Redux\\Interview\\interviewTypes.js":"13","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\Redux\\Interview\\interviewReducers.js":"14","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\Redux\\Interview\\interviewerReducers.js":"15","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\Redux\\Interview\\candidateReducers.js":"16","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\components\\CandidateInformation\\index.js":"17"},{"size":1733,"mtime":1609377723890,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":2748,"mtime":1609377464068,"results":"21","hashOfConfig":"19"},{"size":5039,"mtime":1609389960228,"results":"22","hashOfConfig":"19"},{"size":5947,"mtime":1609426697315,"results":"23","hashOfConfig":"19"},{"size":10393,"mtime":1609428679035,"results":"24","hashOfConfig":"19"},{"size":5009,"mtime":1609431950751,"results":"25","hashOfConfig":"19"},{"size":9326,"mtime":1609432753262,"results":"26","hashOfConfig":"19"},{"size":255,"mtime":1609187952273,"results":"27","hashOfConfig":"19"},{"size":422,"mtime":1609274188624,"results":"28","hashOfConfig":"19"},{"size":473,"mtime":1609209418236,"results":"29","hashOfConfig":"19"},{"size":1541,"mtime":1609185914531,"results":"30","hashOfConfig":"19"},{"size":504,"mtime":1609169694727,"results":"31","hashOfConfig":"19"},{"size":377,"mtime":1609220033921,"results":"32","hashOfConfig":"19"},{"size":950,"mtime":1609391484560,"results":"33","hashOfConfig":"19"},{"size":1134,"mtime":1609382444659,"results":"34","hashOfConfig":"19"},{"size":10684,"mtime":1609428370112,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"z0iusa",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},"C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\index.js",[],["76","77"],"C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\reportWebVitals.js",[],"C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\components\\HomePage\\index.js",[],"C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\components\\InterviewersDashboard\\index.js",["78"],"import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport ModalPersonAdd from '../ModalPersonAdd';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst useStyles = makeStyles((theme)=> ({\r\n    center: {\r\n        textAlign: 'center',\r\n        height: '60vh',\r\n        padding: theme.spacing(4)\r\n    },\r\n    buttonsContainer: {\r\n        textAlign: 'right',\r\n        padding: theme.spacing(4)\r\n    },\r\n    iconNext: {\r\n        fontSize: '0.7rem',\r\n        marginLeft: '0.5rem'\r\n    },\r\n    btnStyle: {\r\n        textTransform: 'inherit'\r\n    },\r\n    mainText: {\r\n        margin: '7rem 0 3rem 0',\r\n        fontSize: '1.4rem',\r\n        fontWeight: '100',\r\n    },\r\n    helpText: {\r\n        fontSize: '0.7rem',\r\n        fontStyle: 'italic',\r\n        marginTop: '1.3rem',\r\n    },\r\n    root: {\r\n        minWidth: 275,\r\n        '&:hover': {\r\n            cursor: 'pointer',\r\n            border: '1.5px solid #BD00FF'\r\n        },\r\n    },\r\n    active: {\r\n        border: '1.5px solid #BD00FF'\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    floatButton: {\r\n        height: 'auto',\r\n        textAlign: 'right',\r\n        position: 'absolute',\r\n        right: '4%',\r\n        top: '14%'\r\n    },\r\n    cards: {\r\n        padding: theme.spacing(1),\r\n    },\r\n    titleBold: {\r\n        fontWeight: '600'\r\n    },\r\n    mainGrid: {\r\n        height: '55vh',\r\n        overflow: 'auto'\r\n    }\r\n}));\r\n\r\nfunction InterviewerDashboard({ reducer }){\r\n    let history = useHistory();\r\n    const classes = useStyles();\r\n    const [active, setActive] = useState({\r\n        id: null,\r\n        active: false\r\n    })\r\n\r\n    const handleNext = (i) =>{\r\n        const aux = reducer.findIndex(index => index.id === i)\r\n\r\n        history.push(\"/candidates/\" + aux)\r\n    }\r\n\r\n    const handleSelectCard = (i) =>{\r\n        const aux = reducer.findIndex(index => index.id === i)\r\n        setActive({\r\n            id: aux,\r\n            active: true\r\n        })\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {reducer.length !== 0 ?\r\n            <React.Fragment>\r\n                <h2 className={classes.titleBold}>Interviewers List</h2>\r\n                <div className={classes.floatButton}>\r\n                    <ModalPersonAdd actionType=\"Add Interviewer\" id={reducer.length} active={`${(active.id !== null) ? active.id : null}`} reducer={reducer} />\r\n                </div>\r\n                <Grid container className={classes.mainGrid}>\r\n                {reducer.map((element, i)=>{\r\n                    return (\r\n                        <Grid item xs={3} className={classes.cards}>\r\n                            <Card className={`${(i === active.id) ? classes.active : classes.root}`} onClick={() => handleSelectCard(i)}>\r\n                                <CardContent>\r\n                                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                                    Interviewer data\r\n                                    </Typography>\r\n                                    <Typography variant=\"h5\" component=\"h2\">\r\n                                    {element.name}\r\n                                    </Typography>\r\n                                    <Typography className={classes.pos} color=\"textSecondary\">\r\n                                    {element.eid}\r\n                                    </Typography>\r\n                                    <Typography component=\"p\" className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                                    Interviewed: {element.candidates}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    )\r\n                })}\r\n                </Grid>\r\n            </React.Fragment> :\r\n            <div className={classes.center}>\r\n                <p className={classes.mainText}>No interviewer has been registered</p>\r\n                <ModalPersonAdd actionType=\"Add Interviewer\" id={0} active={`${(active.id !== null) ? active.id : null}`} reducer={reducer} />\r\n                <p className={classes.helpText}>Click here to add</p>\r\n            </div> }\r\n\r\n            <div className={classes.buttonsContainer}>\r\n                <Button variant=\"contained\" color=\"secondary\" disabled={(active.id === null)} onClick={()=>handleNext(active.id)} className={classes.btnStyle}> Continue <ArrowForwardIosIcon className={classes.iconNext} /> </Button>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default InterviewerDashboard;","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\components\\CandidatesDashboard\\index.js",["79","80"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory, Link, useParams } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { editCandidate } from '../../Redux/Interview/interviewActions';\r\n\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport ArrowRightOutlinedIcon from '@material-ui/icons/ArrowRightOutlined';\r\n\r\nimport ModalPersonAdd from '../ModalPersonAdd';\r\n\r\nconst useStyles = makeStyles((theme)=> ({\r\n    a: {\r\n        textDecoration: 'none'\r\n    },\r\n    center: {\r\n        textAlign: 'center',\r\n        height: '60vh',\r\n        padding: theme.spacing(4)\r\n    },\r\n    buttonsContainer: {\r\n        padding: theme.spacing(4)\r\n    },\r\n    btnStyle: {\r\n        textTransform: 'inherit'\r\n    },\r\n    btnStyleRight: {\r\n        textTransform: 'inherit',\r\n        float: 'right'\r\n    },\r\n    iconBack: {\r\n        fontSize: '0.7rem',\r\n        marginRight: '0.5rem'\r\n    },\r\n    iconNext: {\r\n        fontSize: '0.7rem',\r\n        marginLeft: '0.5rem'\r\n    },\r\n    mainText: {\r\n        margin: '7rem 0 3rem 0',\r\n        fontSize: '1.4rem',\r\n        fontWeight: '100',\r\n    },\r\n    helpText: {\r\n        fontSize: '0.7rem',\r\n        fontStyle: 'italic',\r\n        marginTop: '1.3rem',\r\n    },\r\n    titleBold: {\r\n        fontWeight: '600'\r\n    },\r\n    tableContainer: {\r\n        height: '60vh',\r\n        width: '100%',\r\n        marginBottom: '3rem'\r\n    },\r\n    floatButton: {\r\n        height: 'auto',\r\n        textAlign: 'right',\r\n        position: 'absolute',\r\n        right: '3%',\r\n        top: '-10px'\r\n    },\r\n}));\r\n\r\nfunction CandidatesDashboard({ reducer, interns }){\r\n    let { slug } = useParams();\r\n    let history = useHistory();\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const [idSelected, setID] = useState();\r\n    const [interviewerSelected, setInterviewrSelected] = useState(interns);\r\n    const [urlQuestions, setURLQuestions] = useState();\r\n    const [urlInformation, setURLInformation] = useState();\r\n\r\n    useEffect(()=> {\r\n        let index = [];\r\n        index = interns.filter(i => {\r\n            return i.id === parseInt(slug)\r\n        });\r\n        setInterviewrSelected(index[0]);\r\n        let urlQuestion = \"/questions/\" + interviewerSelected.id +\"/\" + idSelected;\r\n        setURLQuestions(urlQuestion);\r\n    },[idSelected])\r\n\r\n    const handleBack = () => {\r\n        history.push(\"/\")\r\n    }\r\n\r\n    const handleSeeMore = (params) =>{\r\n        let id = params.rowIndex;\r\n        history.push(\"/candidate/\" + slug + \"/\" + id)\r\n    }\r\n\r\n    const handleSaveData = () =>{\r\n        reducer[idSelected].interviewerEID = interviewerSelected.eid;\r\n        dispatch(editCandidate(reducer[idSelected]))\r\n    }\r\n      \r\n    const columns = [\r\n        { field: 'id', headerName: 'ID', width: 50 },\r\n        { field: 'name', headerName: 'Full Name', width: 350 },\r\n        { field: 'email', headerName: 'Email', width: 350 },\r\n        { field: 'typeCandidate', headerName: 'Type Of Candidate', width: 200 },\r\n        { \r\n            field: 'button',\r\n            headerName: 'Candidates Information', \r\n            width: 240,\r\n            renderCell: (params) => (\r\n                <Link to={{ pathname: urlInformation }} className={classes.a}> \r\n                    <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    size=\"small\"\r\n                    style={{ width: '100%', textTransform: 'inherit'}}\r\n                    onClick={() =>handleSeeMore(params)}\r\n                    > \r\n                    See More <ArrowRightOutlinedIcon /> \r\n                    </Button>\r\n                </Link>\r\n            )\r\n        },\r\n    ];\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {reducer.length !== 0 ?\r\n                <div className={classes.tableContainer}>\r\n                    <div className={classes.floatButton}>\r\n                        <ModalPersonAdd actionType=\"Add Candidate\" id={reducer.length} active=\"null\" reducer=\"[]\" />\r\n                    </div>\r\n                    <h2 className={classes.titleBold}>Canidates List</h2>\r\n                    <DataGrid \r\n                    autoPageSize={false} \r\n                    disableMultipleSelection={true} \r\n                    rows={reducer} \r\n                    columns={columns}\r\n                    onSelectionChange={(newSelection) => {\r\n                        const cellID = parseInt(newSelection.rowIds);\r\n                        setID(cellID);\r\n                    }}\r\n                    />\r\n                    \r\n                </div>\r\n            :\r\n                <React.Fragment>\r\n                    <div className={classes.center}>\r\n                        <p className={classes.mainText}>No candidate has been registered</p>\r\n                        <ModalPersonAdd actionType=\"Add Candidate\" id={reducer.length} active=\"null\" reducer={reducer} />\r\n                        <p className={classes.helpText}>Click here to add</p>\r\n                    </div>\r\n\r\n                </React.Fragment>\r\n            }\r\n            <div className={classes.buttonsContainer}>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={handleBack} className={classes.btnStyle}><ArrowBackIosIcon className={classes.iconBack} /> Back </Button>\r\n                <Link to={{ pathname: urlQuestions }}> \r\n                    <Button onClick={handleSaveData} variant=\"contained\" color=\"secondary\" className={classes.btnStyleRight}> \r\n                        Continue <ArrowForwardIosIcon className={classes.iconNext} />\r\n                    </Button>\r\n                </Link>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default CandidatesDashboard;","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\components\\ModalPersonAdd\\index.js",["81"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport PersonAddOutlinedIcon from '@material-ui/icons/PersonAddOutlined';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport { Dialog, DialogContent, TextField, FormControl, Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { addInterviewer, editInterviewer, deleteInterviewer, addCandidate, editCandidate } from '../../Redux/Interview/interviewActions';\r\n\r\n\r\nconst modalStyles = makeStyles((theme)=> ({\r\n    titleFormat: {\r\n        padding: theme.spacing(3),\r\n        margin: 0,\r\n        textAlign: 'center'\r\n    },\r\n    inputForm: {\r\n        width: '100%',\r\n        margin: theme.spacing(2, 0)\r\n    },\r\n    btnsContainer: {\r\n        padding: theme.spacing(2, 1),\r\n        float: 'right'\r\n    },\r\n    btnStyle: {\r\n        textTransform: 'inherit',\r\n        '&:first-child':{\r\n            marginRight: theme.spacing(2)\r\n        }\r\n    }\r\n}))\r\n\r\nconst buttonsStyles = makeStyles((theme)=> ({\r\n    display: {\r\n        display: 'block', \r\n    },\r\n    notDisplay: {\r\n        display: 'none'\r\n    },\r\n    marginBtn: {\r\n        display: 'block', \r\n        margin: theme.spacing(2, 0)\r\n    }\r\n}))\r\n\r\nfunction Modal({\r\n    type,\r\n    openDialog,\r\n    person,\r\n    candidate,\r\n    onChangeInputPerson,\r\n    onChangeInputCandidate,\r\n    closeDialog,\r\n    handleAddCandidate,\r\n    handleEditCandidate,\r\n    handleAddInterviewer,\r\n    handleEditInterviewer,\r\n    keyID\r\n}){\r\n    const classes = modalStyles();\r\n    // console.log('modal values: ', candidate)\r\n    return(\r\n        <Dialog open={openDialog} onClose={closeDialog} fullWidth={true} maxWidth={'sm'}>\r\n            <h2 className={classes.titleFormat}>{type}</h2>\r\n            <DialogContent>\r\n            { (type === 'Add Interviewer' || type === 'Edit Interviewer') ?\r\n                <form autoComplete=\"off\" className=\"form\" onSubmit={handleAddInterviewer}>\r\n                    <TextField name=\"name\" label=\"Name\" value={person.name} onChange={onChangeInputPerson} required className={classes.inputForm} />\r\n                    <TextField name=\"id\" disabled label=\"ID\" value={keyID} onChange={onChangeInputPerson} required className={classes.inputForm}/>\r\n                    <TextField name=\"eid\" label=\"EID\" value={person.eid} onChange={onChangeInputPerson} required className={classes.inputForm}/>\r\n                    <div className={classes.btnsContainer}>\r\n                        {type === 'Add Interviewer' ? \r\n                        <Button variant=\"contained\" color=\"secondary\" type=\"submit\" onClick={handleAddInterviewer} className={classes.btnStyle}>Save</Button>\r\n                        :\r\n                        <Button variant=\"contained\" color=\"secondary\" type=\"submit\" onClick={handleEditInterviewer} className={classes.btnStyle}>Save Cahnges</Button>\r\n                        }\r\n                        <Button variant=\"contained\" color=\"info\" onClick={closeDialog} className={classes.btnStyle}>Cancel</Button>\r\n                    </div>\r\n                </form>\r\n                :\r\n                <form autoComplete=\"off\" className=\"form\" onSubmit={handleAddCandidate}>\r\n                    <TextField name=\"name\" label=\"Name\" value={candidate.name} onChange={onChangeInputCandidate} required className={classes.inputForm} />\r\n                        <TextField name=\"email\" label=\"Email\" value={candidate.email} onChange={onChangeInputCandidate} required className={classes.inputForm}/>\r\n        \r\n                        <TextField name=\"typeCandidate\" label=\"Type\" value={candidate.typeCandidate} onChange={onChangeInputCandidate} required className={classes.inputForm}/>\r\n                        <div className={classes.btnsContainer}>\r\n                            {type === 'Add Candidate' ? \r\n                            <Button variant=\"contained\" color=\"secondary\" type=\"submit\" onClick={handleAddCandidate} className={classes.btnStyle}>Save</Button>\r\n                            :\r\n                            <Button variant=\"contained\" color=\"secondary\" type=\"submit\" onClick={handleEditCandidate} className={classes.btnStyle}>Save Changes</Button>\r\n                            }\r\n                            <Button variant=\"contained\" color=\"info\" onClick={closeDialog} className={classes.btnStyle}>Cancel</Button>\r\n                        </div>\r\n                </form>\r\n            }\r\n            </DialogContent>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nfunction ModalPersonAdd(props){\r\n    const [typeOfPerson, setTypeOfPerson] = useState(\"\");\r\n    const [open, setOpen] = useState(false);\r\n    const [active, setActive] = useState(false);\r\n    const [id, setID] = useState(0);\r\n    const dispatch = useDispatch();\r\n    const classes = buttonsStyles();\r\n\r\n    const [person, setPerson] = useState({\r\n        name: '',\r\n        id: id,\r\n        eid: '',\r\n        candidates: 0       \r\n    });\r\n    const [candidate, setCandidate] = useState({\r\n        id: id,\r\n        name: '',\r\n        email: '',\r\n        typeCandidate: '',\r\n        skills: [],\r\n        score: 20,\r\n        interviewerEID: '',\r\n        questions: [],\r\n        button: '',\r\n        summary: false,\r\n        summaryComments: ''\r\n    });\r\n\r\n    useEffect(()=>{\r\n        if(props.id === undefined){\r\n            setID(0)\r\n        }else{\r\n            setID(props.id)\r\n        }\r\n\r\n        if(props.active !== \"null\") {\r\n            setActive(true)\r\n            setID(parseInt(props.active))\r\n            // console.log('active m: ', id)\r\n        }\r\n\r\n        if(props.id === 0){\r\n            setActive(false)\r\n            setID(0)\r\n        }\r\n    },[props])\r\n    // console.log('props m: ', props)\r\n\r\n    const handleInputChangePerson = (e, x) => {\r\n        const newInterviewer = {...person};\r\n        newInterviewer[e.target.name] = e.target.value;\r\n        e.preventDefault();\r\n        setPerson(newInterviewer)\r\n    }\r\n    \r\n    const handleInputChangeCandidate = (e) => {\r\n        const newCandidate = {...candidate};\r\n        newCandidate[e.target.name] = e.target.value;\r\n        e.preventDefault();\r\n        setCandidate(newCandidate)\r\n    }\r\n\r\n    const handleModalClose = () => {\r\n        setOpen(false)\r\n    }\r\n    \r\n    const handleTypeOfPerson = (x) => {\r\n        // console.log('type> ', x)\r\n        setOpen(true)\r\n        setTypeOfPerson(x)\r\n\r\n        if(x === \"Edit Interviewer\"){\r\n            let aux = {}\r\n            aux = props.reducer.filter(i => {\r\n                return i.id === parseInt(props.active)\r\n            });\r\n            setPerson(aux[0]);\r\n            setID(aux[0].id)\r\n            // console.log('person m: ', aux[0])\r\n        }else{\r\n            setPerson({\r\n                name: '',\r\n                id: id,\r\n                eid: '',\r\n                candidates: 0       \r\n            })\r\n            setID(props.id)\r\n        }\r\n\r\n        if(x === \"Edit Candidate\"){\r\n            let aux = {}\r\n            aux = props.reducer.filter(i => {\r\n                return i.id === parseInt(props.active)\r\n            });\r\n            setCandidate(aux[0]);\r\n            setID(aux[0].id)\r\n        }else{\r\n            setCandidate({\r\n                id: id,\r\n                name: '',\r\n                email: '',\r\n                typeCandidate: '',\r\n                skills: [],\r\n                score: 20,\r\n                interviewerEID: '',\r\n                questions: [],\r\n                button: '',\r\n                summary: false,\r\n                summaryComments: ''\r\n            })\r\n            setID(props.id)\r\n        }\r\n        // console.log('candidate m: ', candidate)\r\n\r\n    }\r\n\r\n    const postInterviewer = (e) => {\r\n        e.preventDefault();\r\n        dispatch(addInterviewer(person));\r\n        setPerson({\r\n            name: '',\r\n            id: id,\r\n            eid: '',\r\n            candidates: 0       \r\n        })\r\n        setOpen(false)\r\n    }\r\n\r\n    const handleEditInterviewer = (e) => {\r\n        e.preventDefault();\r\n        dispatch(editInterviewer(person));\r\n        setOpen(false)\r\n    }\r\n    \r\n    const saveEditCandidate = (e) => {\r\n        e.preventDefault();\r\n        dispatch(editCandidate(candidate));\r\n        setOpen(false)\r\n        console.log('new candidate: ', candidate)\r\n    }\r\n    \r\n    const postCandidate = (e) => {\r\n        e.preventDefault();\r\n        dispatch(addCandidate(candidate));\r\n        setCandidate({\r\n            id: null,\r\n            name: '',\r\n            email: '',\r\n            typeCandidate: '',\r\n            skills: [],\r\n            score: 20,\r\n            interviewerEID: '',\r\n            questions: [],\r\n            button: '',\r\n            summary: false,\r\n            summaryComments: ''\r\n        })\r\n        setOpen(false)\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <Modal \r\n            type={typeOfPerson} \r\n            openDialog={open} \r\n            person={person}\r\n            candidate={candidate}\r\n            onChangeInputPerson={handleInputChangePerson}\r\n            onChangeInputCandidate={handleInputChangeCandidate}\r\n            closeDialog={handleModalClose} \r\n            handleAddInterviewer={postInterviewer}\r\n            handleEditInterviewer={handleEditInterviewer}\r\n            handleAddCandidate={postCandidate}\r\n            handleEditCandidate={saveEditCandidate}\r\n            keyID={id}\r\n            />\r\n\r\n\r\n            {props.actionType === 'Edit Candidate' ? \r\n            <Fab color=\"secondary\" aria-label=\"add\" onClick={()=> handleTypeOfPerson(props.actionType)}>\r\n                <EditIcon />\r\n            </Fab>\r\n            :\r\n            <Fab color=\"secondary\" aria-label=\"add\" onClick={()=> handleTypeOfPerson(props.actionType)}>\r\n                <PersonAddOutlinedIcon />\r\n            </Fab>\r\n            }\r\n\r\n            <Fab color=\"secondary\" aria-label=\"add\" onClick={()=> handleTypeOfPerson(\"Edit Interviewer\")} className={`${!active ? classes.notDisplay : classes.marginBtn}`}>\r\n                <EditIcon />\r\n            </Fab>\r\n\r\n            <Fab color=\"secondary\" aria-label=\"add\" onClick={()=> dispatch(deleteInterviewer(id))} className={`${!active ? classes.notDisplay : classes.display}`}>\r\n                <DeleteOutlineIcon />\r\n            </Fab>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ModalPersonAdd;","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\components\\QuestionsPage\\index.js",["82","83","84"],"C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\components\\SummaryPage\\index.js",["85"],"C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\Redux\\store.js",[],"C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\Redux\\rootReducer.js",[],"C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\Redux\\context.js",[],"C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\Redux\\Interview\\interviewActions.js",[],"C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\Redux\\Interview\\interviewTypes.js",[],"C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\Redux\\Interview\\interviewReducers.js",[],"C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\Redux\\Interview\\interviewerReducers.js",[],"C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\Redux\\Interview\\candidateReducers.js",["86","87","88","89"],"import {\r\n    ADD_CANDIDATE,\r\n    EDIT_CANDIDATE,\r\n    ADD_SKILLS,\r\n    EDIT_SKILLS,\r\n    SAVE_QUESTIONS,\r\n    ADD_COMMENT_SUMMARY,\r\n} from './interviewTypes';\r\n\r\nconst INITIAL_STATE = [];\r\n\r\nconst reducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type){\r\n        case ADD_CANDIDATE:\r\n            state.push({\r\n                id: state.length,\r\n                name: action.payload.name,\r\n                email: action.payload.email,\r\n                typeCandidate: action.payload.typeCandidate,\r\n                skills: [],\r\n                score: 20,\r\n                interviewerEID: action.payload.interviewerEID,\r\n                questions: [],\r\n                button: action.payload.button,\r\n                summary: action.payload.summary,\r\n                summaryComments: action.payload.summaryComments\r\n            })\r\n            return [...state]\r\n        case EDIT_CANDIDATE:\r\n            const aux = state.findIndex(i => i.id === action.payload.id)\r\n            state[aux] = action.payload;\r\n            return [...state]\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","C:\\Users\\mariana.hernandez\\Documents\\@mariana.hernandez\\React AcademyCourse\\accenture-react-project\\src\\components\\CandidateInformation\\index.js",["90"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { editCandidate } from '../../Redux/Interview/interviewActions';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport { Dialog, DialogContent, FormControlLabel, FormGroup, Button, Card, CardContent, Avatar, Checkbox, ListItemIcon, ListItem, ListItemAvatar } from '@material-ui/core';\r\n\r\nimport InsertDriveFileOutlinedIcon from '@material-ui/icons/InsertDriveFileOutlined';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport ExtensionIcon from '@material-ui/icons/Extension';\r\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\r\nimport StarRateRoundedIcon from '@material-ui/icons/StarRateRounded';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nimport ModalPersonAdd from '../ModalPersonAdd';\r\n\r\nconst candidateStyles = makeStyles((theme)=> ({\r\n    center: {\r\n        textAlign: 'center'\r\n    },\r\n    flex: {\r\n        display: 'flex'\r\n    },\r\n    title: {\r\n        ...theme.typography.h6,\r\n        fontWeight: '600',\r\n        margin: theme.spacing(1, 0)\r\n    },\r\n    infoText: {\r\n        ...theme.typography.subtitle1,\r\n        margin: theme.spacing(0)\r\n    },\r\n    iconSize: {\r\n        fontSize: '5rem',\r\n    },\r\n    avatar: {\r\n        padding: theme.spacing(4),\r\n        marginTop: theme.spacing(1.5)\r\n    },\r\n    infoBox: {\r\n        padding: theme.spacing(2, 6, 4, 6)\r\n    },\r\n    skillsBox: {\r\n        padding: theme.spacing(2, 6, 4, 6),\r\n        height: '40vh'\r\n    },\r\n    subtitle: {\r\n        fontSize: '0.7rem',\r\n        fontStyle: 'italic',\r\n        marginTop: '1.3rem',\r\n    },\r\n    titleAddSkills: {\r\n        margin: '1rem 0 1rem 0',\r\n        fontSize: '1.2rem',\r\n        fontWeight: '100',\r\n        fontStyle: 'italic'\r\n    },\r\n    extendedIcon: {\r\n        margin: theme.spacing(2, 1)\r\n    },\r\n    mainCard: {\r\n        width: '90%'\r\n    },\r\n    addBtnSkills: {\r\n        textTransform: 'inherit',\r\n        float: 'right',\r\n        margin: theme.spacing(3, 2)\r\n    },\r\n    paddingTop: {\r\n        paddingTop: theme.spacing(4)\r\n    },\r\n    modalSkillsContainer: {\r\n        width: '80%',\r\n        margin: '0 auto',\r\n    },\r\n    modalTitle: {\r\n        margin: theme.spacing(0, 4, 2, 4)\r\n    },\r\n    modalBtns: {\r\n        padding: theme.spacing(3, 0),\r\n        width: '100%',\r\n        '& :nth-child(2)': {\r\n            float: 'right'\r\n        }\r\n    },\r\n    iconList: {\r\n        minWidth: '10%'\r\n    },\r\n    textList: {\r\n        fontSize: '1.1rem',\r\n        margin: '0 0 5px 0',\r\n        fontWeight: '400'\r\n    },\r\n    btn: {\r\n        textTransform: 'inherit'\r\n    },\r\n    btnContainer: {\r\n        width: '100%',\r\n        padding: theme.spacing(4),\r\n        '& button' : {\r\n          float: 'right'  \r\n        }\r\n    },\r\n    summaryBtn: {\r\n        textTransform: 'inherit',\r\n        margin: theme.spacing(2, 0),\r\n        position: 'absolute'\r\n    },\r\n    btnEdit: {\r\n        position: 'relative',\r\n        left: '90%'\r\n    }\r\n}))\r\n\r\n\r\nconst skillsArray = [\r\n    {\r\n        name: 'Bootstrap',\r\n        checked: false\r\n    },\r\n    {\r\n        name: 'Node JS',\r\n        checked: false\r\n    },\r\n    {\r\n        name: 'React JS',\r\n        checked: false\r\n    },\r\n    {\r\n        name: 'Vue JS',\r\n        checked: false\r\n    },\r\n    {\r\n        name: 'Angular 6+',\r\n        checked: false\r\n    },\r\n]\r\n\r\nfunction Modal({\r\n    openDialog,\r\n    candidate,\r\n    onChangeInputPerson,\r\n    closeDialog,\r\n    classes,\r\n    handleAddSkills\r\n}){\r\n    const [skills, setSkills] = useState(skillsArray)\r\n    \r\n    const handleChange = (event) => {\r\n        setSkills([...skillsArray, skillsArray[event.target.id].checked = event.target.checked])\r\n    };\r\n\r\n    return(\r\n        <Dialog open={openDialog} onClose={closeDialog} fullWidth={true} maxWidth={'xs'}>\r\n            <DialogContent>\r\n                <h2 className={classes.modalTitle}>Skills to evaluate</h2>\r\n                <div>\r\n                <FormGroup row className={classes.modalSkillsContainer}>\r\n                    {skillsArray.map((element, i) => (\r\n                        <FormControlLabel\r\n                        control={<Checkbox id={i} checked={element.checked} onChange={handleChange} name={element.name} />}\r\n                        label={element.name} />\r\n                    ))}\r\n                    <div className={classes.modalBtns}>\r\n                        <Button variant=\"contained\" onClick={closeDialog} className={classes.btn}>Cancel</Button>\r\n                        <Button color=\"secondary\" variant=\"contained\" onClick={()=>handleAddSkills(skills)} className={classes.btn}>Save</Button>\r\n                    </div>\r\n                </FormGroup>\r\n                </div>\r\n            </DialogContent>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nfunction CandidateInformation(props){\r\n    let { idInterviewer, idCandidate } = useParams();\r\n    const dispatch = useDispatch();\r\n    let history = useHistory();\r\n    const classes = candidateStyles();\r\n    const [candidate, setCandidate] = useState({});\r\n    const [skills, setSkills] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        let aux = {}\r\n        aux = props.reducer.filter(i => {\r\n            return i.id === parseInt(idCandidate)\r\n        });\r\n        setCandidate(aux[0]);\r\n        \r\n        if(candidate.skills !== undefined){\r\n            setSkills(candidate.skills)\r\n        }\r\n    },[candidate, skills, idCandidate, props])\r\n\r\n    const handleInputChange = (e, x) => {\r\n        const newInterviewer = {...candidate};\r\n        newInterviewer[e.target.name] = e.target.value;\r\n        e.preventDefault();\r\n        setCandidate(newInterviewer)\r\n    }\r\n\r\n    const handleModalClose = () =>{\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleAddSkills = () =>{\r\n        setOpen(true)\r\n    }\r\n    \r\n    const handleSaveSkills = (i) =>{\r\n        candidate.skills = i;\r\n        setSkills(i)\r\n        dispatch(editCandidate(candidate));\r\n        setOpen(false)\r\n    }\r\n\r\n    const handleSaveCandidate = () =>{\r\n        dispatch(editCandidate(candidate))\r\n        history.push(\"/candidates/\" + idInterviewer )\r\n    }\r\n    \r\n    const handleSeeSummary = () => {\r\n        history.push(\"/summary/\" + candidate.id )\r\n    }\r\n\r\n    return(\r\n        <Grid container className={classes.paddingTop}>\r\n            <Grid item xs={6} className={classes.flex}>\r\n                <Card className={classes.mainCard}>\r\n                <CardContent className={classes.flex}>\r\n                <Grid item xs={2}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <AccountCircleIcon className={classes.iconSize} />\r\n                    </Avatar>\r\n                </Grid>\r\n                <Grid item xs={10} className={classes.infoBox}>\r\n                    <h2 className={classes.title}>Nombre Completo</h2>\r\n                    <p className={classes.infoText}>{candidate.name}</p>\r\n                    <h2 className={classes.title}>Email</h2>\r\n                    <p className={classes.infoText}>{candidate.email}</p>\r\n                    <h2 className={classes.title}>Type of candidate</h2>\r\n                    <p className={classes.infoText}>{candidate.typeCandidate}</p>\r\n                    \r\n                    <Fab variant=\"extended\" color=\"secondary\" aria-label=\"add\" onClick={handleSeeSummary} disabled={(candidate.summary === false)} className={classes.summaryBtn}>\r\n                        <InsertDriveFileOutlinedIcon className={classes.extendedIcon} /> See Summary\r\n                    </Fab>\r\n\r\n                    <div className={classes.btnEdit}>\r\n                        <ModalPersonAdd actionType=\"Edit Candidate\" id={0} active={idCandidate} reducer={[candidate]} />\r\n                    </div>\r\n                </Grid>\r\n                </CardContent>\r\n                </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={6} className={classes.flex}>\r\n                <Card className={classes.mainCard}>\r\n                    <CardContent className={classes.flex}>\r\n                        <Grid item xs={2}>\r\n                            <Avatar className={classes.avatar}>\r\n                                <ExtensionIcon className={classes.iconSize} />\r\n                            </Avatar>\r\n                        </Grid>\r\n                        <Grid item xs={10} className={classes.skillsBox}>\r\n                            <p className={classes.title}>Skills to evaluate</p>\r\n                            <Modal\r\n                            openDialog={open} \r\n                            candidate={candidate}\r\n                            onChangeInputPerson={handleInputChange}\r\n                            closeDialog={handleModalClose} \r\n                            classes={classes}\r\n                            handleAddSkills={(inputSkills)=>handleSaveSkills(inputSkills)}\r\n                            />\r\n                            \r\n                            {candidate.skills === [] ?\r\n                                <p className={classes.titleAddSkills}>No skills found</p>\r\n                                :\r\n                                <div>\r\n                                    {skills.map((element, i)=>(\r\n                                            <React.Fragment>{element.checked === true ?\r\n                                            <ListItem>\r\n                                                <ListItemIcon className={classes.iconList}>\r\n                                                    <StarRateRoundedIcon />\r\n                                                </ListItemIcon>\r\n                                                <p className={classes.textList}>{element.name}</p> \r\n                                            </ListItem>\r\n                                            : null}\r\n                                            </React.Fragment>\r\n                                    ))}\r\n                                </div>\r\n                            }\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Fab variant=\"extended\" color=\"secondary\" aria-label=\"add\" onClick={handleAddSkills} className={classes.addBtnSkills}>\r\n                        <AddOutlinedIcon className={classes.extendedIcon} /> Add Skills\r\n                    </Fab>\r\n                </Card>\r\n            </Grid>\r\n            <div className={classes.btnContainer}>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={handleSaveCandidate} className={classes.btn}>Save</Button>\r\n            </div>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default CandidateInformation;",{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":13,"column":8,"nodeType":"97","messageId":"98","endLine":13,"endColumn":16},{"ruleId":"95","severity":1,"message":"99","line":77,"column":28,"nodeType":"97","messageId":"98","endLine":77,"endColumn":45},{"ruleId":"100","severity":1,"message":"101","line":87,"column":7,"nodeType":"102","endLine":87,"endColumn":19,"suggestions":"103"},{"ruleId":"95","severity":1,"message":"104","line":8,"column":44,"nodeType":"97","messageId":"98","endLine":8,"endColumn":55},{"ruleId":"95","severity":1,"message":"105","line":77,"column":11,"nodeType":"97","messageId":"98","endLine":77,"endColumn":24},{"ruleId":"100","severity":1,"message":"106","line":89,"column":7,"nodeType":"102","endLine":89,"endColumn":9,"suggestions":"107"},{"ruleId":"95","severity":1,"message":"108","line":96,"column":11,"nodeType":"97","messageId":"98","endLine":96,"endColumn":21},{"ruleId":"100","severity":1,"message":"109","line":170,"column":7,"nodeType":"102","endLine":170,"endColumn":20,"suggestions":"110"},{"ruleId":"95","severity":1,"message":"111","line":4,"column":5,"nodeType":"97","messageId":"98","endLine":4,"endColumn":15},{"ruleId":"95","severity":1,"message":"112","line":5,"column":5,"nodeType":"97","messageId":"98","endLine":5,"endColumn":16},{"ruleId":"95","severity":1,"message":"113","line":6,"column":5,"nodeType":"97","messageId":"98","endLine":6,"endColumn":19},{"ruleId":"95","severity":1,"message":"114","line":7,"column":5,"nodeType":"97","messageId":"98","endLine":7,"endColumn":24},{"ruleId":"95","severity":1,"message":"115","line":8,"column":131,"nodeType":"97","messageId":"98","endLine":8,"endColumn":145},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"no-unused-vars","'EditIcon' is defined but never used.","Identifier","unusedVar","'setURLInformation' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'interns', 'interviewerSelected.id', and 'slug'. Either include them or remove the dependency array.","ArrayExpression",["118"],"'FormControl' is defined but never used.","'idInterviewer' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'idCandidate' and 'props.reducer'. Either include them or remove the dependency array.",["119"],"'handleNext' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'reducer'. Either include it or remove the dependency array.",["120"],"'ADD_SKILLS' is defined but never used.","'EDIT_SKILLS' is defined but never used.","'SAVE_QUESTIONS' is defined but never used.","'ADD_COMMENT_SUMMARY' is defined but never used.","'ListItemAvatar' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"Update the dependencies array to be: [idSelected, interns, interviewerSelected.id, slug]",{"range":"127","text":"128"},"Update the dependencies array to be: [idCandidate, props.reducer]",{"range":"129","text":"130"},"Update the dependencies array to be: [idCandidate, reducer]",{"range":"131","text":"132"},[2555,2567],"[idSelected, interns, interviewerSelected.id, slug]",[2635,2637],"[idCandidate, props.reducer]",[4979,4992],"[idCandidate, reducer]"]